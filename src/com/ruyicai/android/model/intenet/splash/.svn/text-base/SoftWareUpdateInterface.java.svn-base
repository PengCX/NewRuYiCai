package com.ruyicai.android.model.intenet.splash;

import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;

import com.ruyicai.android.model.bean.PhoneInfo;
import com.ruyicai.android.model.bean.SoftWareInfo;
import com.ruyicai.android.model.intenet.BaseInterface;

/**
 * 软件升级接口
 *
 * @author PengCX
 * @since RYC1.0 2013-2-27
 */
public class SoftWareUpdateInterface extends BaseInterface {
	/** 随机数-用于自动登录 */
	private static final String RANDOMNUMBER_OPTIONAL_PARAMTER = "randomNumber";
	/** 命令- softwareupdate */
	private static final String COMMAND_NECESSARY_PARAMTER = "command";
	/** 是否使用模拟器-true使用模拟器，false没有使用模拟器 */
	private static final String ISEMULATOR_IPTIONAL_PARAMTER = "isemulator";

	/** 是否添加随机数 */
	private boolean _fAddRandomNum = false;
	/** 是否添加是否是模拟器 */
	private boolean _fAddIsEmulator = false;

	// 广播信息
	/** 广播消息 */
	private static final String BROADCASTMESSAGE_BROADCAST_TAG = "broadcastmessage";
	/** 命令 - 客户端保存的id与返回的id比较，如果不同则弹出广播消息 */
	private static final String ID_BROADCAST_TAG = "id";
	/** 标题 */
	private static final String TITLE_BROADCAST_TAG = "title";
	/** 消息内容 */
	private static final String MESSAGE_BROADCAST_TAG = "message";

	// 彩种信息
	/** 各彩种的当前期号-高频彩的当前期号是实时获取的，不用此返回的期号 */
	private static final String CURRENTBATCHCODE_LOTTORY_TAG = "currentBatchCode";
	/** 期号-如：2012557、2012153 */
	private static final String BATCHCODE_LOTTORY_TAG = "batchCode";
	/** 期结时间 - 如：12-07-16 20:59、12-07-18 22:00 */
	private static final String ENDTIME_LOTTORY_TAG = "endTime";
	/** 距期结时间剩余秒数 */
	private static final String ENDSECOND_LOTTORY_TAG = "endSecond";
	/** 是否今日开奖 -只有双色球、七乐彩、大乐透返回 */
	private static final String ISTODAYOPENPRIZE_LOTTORY_TAG = "isTodayOpenPrize";
	/** 软件升级 */
	private static final String TITLE_LOTTORY_TAG = "title";
	/** 下次通知联网时间 -已废弃，不再使用 */
	private static final String NOTICETIME_LOTTORY_TAG = "noticetime";
	/** Top新闻 */
	private static final String NEWS_LOTTORY_TAG = "news";

	// 升级信息
	/** 是否提示升级-true提示，false不提示 */
	private static final String ERRORCODE_UPDATE_TAG = "errorCode";
	/** 升级提示信息-当errorCode为true时才有这些信息 */
	private static final String MESSAGE_UPDATE_TAG = "message";
	/** 升级地址-当errorCode为true时才有这些信息 */
	private static final String UPDATEURL_UPDATE_TAG = "updateurl";

	// 开机图片更新信息
	/** 开机图片 */
	private static final String IMAGE_TURNON_TAG = "image";
	/** 是否使用默认图片-true不使用默认图片，false使用默认图片 */
	private static final String ERRORCODE_TURNON_TAG = "errorCode";
	/** 图片ID-客户端根据返回的id判断是否需要下载新图片(errorCode为true时才有) */
	private static final String ID_TURNON_TAG = "id";
	/** 图片更新地址-errorCode为true时才有 */
	private static final String IMAGEURL_TURNON_TAG = "imageUrl";

	// 自动登录信息
	/** 自动登录 */
	private static final String AUTOLOGIN_AUTO_TAG = "autoLogin";
	/** 是否自动登录 - true是，false否 */
	private static final String ISAUTOLOGIN_AUTO_TAG = "isAutoLogin";
	/** 用户编号 */
	private static final String USERNO_AUTO_TAG = "userno";
	/** 身份证号 */
	private static final String CERTID_AUTO_TAG = "certid";
	/** 手机号 */
	private static final String MOBILEID_AUTO_TAG = "mobileid";
	/** 真实姓名 */
	private static final String NAME_AUTO_TAG = "name";
	/** 用户名 */
	private static final String USERNAME_AUTO_TAG = "userName";
	/** SessionId */
	private static final String SEDDIONID_AUTO_TAG = "sessionid";

	private static final String fCommand = "softwareupdate";

	public SoftWareUpdateInterface(boolean aAddPhoneSIM, boolean aAddMac, boolean aAddRandomNum, boolean aAddIsEmulator) {
		super(aAddPhoneSIM, aAddMac);
		_fAddRandomNum = aAddRandomNum;
		_fAddIsEmulator = aAddIsEmulator;
	}

	@Override
	public JSONObject setParticularParamerters(Context aContext, JSONObject aJsonObject) {
		try {
			aJsonObject.put(COMMAND_NECESSARY_PARAMTER, fCommand);

			if (_fAddRandomNum) {
				// TODO 暂且不明白自动登录随机参数作用，先不进行设置
			}

			if (_fAddIsEmulator) {
				PhoneInfo phoneInfo = PhoneInfo.getInstance(aContext);
				aJsonObject.put(ISEMULATOR_IPTIONAL_PARAMTER, phoneInfo.isSimulater());
			}
		} catch (JSONException e) {
			e.printStackTrace();
		}

		return aJsonObject;
	}

	/**
	 * 解析软件更新信息
	 *
	 * @param aContext
	 *            上下文对象
	 * @param aResultString
	 *            结果字符串
	 * @return 包含软件更新信息的softWareInfo对象
	 */
	public SoftWareInfo parseSoftwareUpdateInfo(Context aContext, String aResultString) {
		SoftWareInfo softWareInfo = SoftWareInfo.getInstance(aContext);

		try {
			JSONObject resultJsonObject = new JSONObject(aResultString);

			softWareInfo.setHasSoftWareUpdate(Boolean.valueOf(resultJsonObject.getString(ERRORCODE_UPDATE_TAG)));
			softWareInfo.setSoftWareUpdateMessage(resultJsonObject.getString(MESSAGE_UPDATE_TAG));
			softWareInfo.setSoftWareUpdateUrl(resultJsonObject.getString(UPDATEURL_UPDATE_TAG));

		} catch (JSONException e) {
			e.printStackTrace();
		}

		return softWareInfo;
	}
}
